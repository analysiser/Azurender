README

Xiao Li, 7/17/2014 
<xiaol2@alumni.cmu.edu>

---------------------------------------------------------------------------
Overview
---------------------------------------------------------------------------

Azurender

Azurender is a ray tracing based renderer. It was originated from project 3 of CMU's computer graphics class 
(15-462). (http://www.cs.cmu.edu/afs/cs/academic/class/15462-f13/www/)

It currently supports direct illumination, path tracing based global illumination, image based lighting. 
It is capable or rendering diffusive, transmissive and specular reflective surfaces, with relatively
incomplete texture mapping (limitations of 15-462 starter code and I'm working on a complete recon-
struction on framwork...). It supports environment mapping based on cube mapping 
(The function still need to improve). It supports depth of field.

It has acceleration data structures for photon mapping (KD-Tree) and ray tracing
(BVH Tree). For KD-Tree construction and nearest neighbor searching, there are more details
in my final project for Parallel Computer Architecture and Programming (15-418, by Kavon Fatahalian:
http://15418.courses.cs.cmu.edu/spring2014/) description (http://cargocollective.com/xiaoli/15418-Final-Project).

NOTE:
For 15-462 students in CMU, some implementation might be helpful to your project,
but please learn by yourself first, Shirley's book and PBRT are good resources. 
Please do not just copy the code.
PBRT: (www.pbrt.org)

---------------------------------------------------------------------------
Building the Code
---------------------------------------------------------------------------

This project uses the CMake build system (www.cmake.org). CMake is a kind of
"meta build-system," in that it creates a build system for you. It supports
many different build systems, ranging from Unix Makefiles to Visual Studio
projects to XCode projects.

1) If you don't have CMake installed, you should install it. If you're running
    Linux, it should be available through your package manager (apt-get, pacman, ports, etc). 
    Windows and OSX installers can be downloaded from (http://www.cmake.org/cmake/resources/software.html)
    For easier usage, I'm using homebrew (http://brew.sh/) on my Mac.
2) Open up a command prompt in the "build" directory and run "cmake ../src".
    CMake will generate the build system in the build directory. By default,
    CMake will generate Makefiles on Linux and OSX and a Visual Studio project
    on Windows. If you'd like to change that, you can pass a different
    "generator" to cmake with the -G flag. A full list of generators can be
    found at the bottom of the output generated by running "cmake". For
    example, "cmake -G 'Xcode' ../src" will generate an Xcode project on OSX.
3) Supporting libraries are needed for the project as well, including opengl, glew, libpng, SDL.
    Again, Linux/Unix/OSX users could use your package manager to get those libraries.

For debugging, use the following CMake command:

cmake -DCMAKE_BUILD_TYPE=Debug ../src

for tracing images (especially if you have global illumination and/or a distributed ray tracer) 
use the following CMake command: (Which I don't think would be useful at all...)

cmake -DCMAKE_BUILD_TYPE=Release ../src

---------------------------------------------------------------------------
Running the Program
---------------------------------------------------------------------------

raytracer [-r] [-d width height] input_scene [output_file]

Options:

    -r:
        Raytraces the scene and saves to the output file without
        loading a window or creating an opengl context.
    -d width height
        The dimensions of image to raytrace (and window if usingg
        and opengl context. Defaults to width=800, height=600.
    input_scene:
        The scene file to load and raytrace.
    output_file:
        The output file in which to write the rendered images.
        If not specified, default timestamped filenames are used.

Instructions:

    Press 'r' to raytrace the scene. Press 'r' again to go back to
    go back to OpenGL rendering. Press 'f' to dump the most recently
    raytraced image to the output file.

    Use the mouse and 'w', 'a', 's', 'd', 'q', and 'e' to move the
    camera around. The keys translate the camera, and left and right
    mouse buttons rotate the camera.

    If not using windowed mode (i.e., -r was specified), then output
    image will be automatically generated and the program will exit.


Note for MAC users:
Xcode would build the executable file under build/raytracer/debug. Copy everything 
in /resources to /debug file, then you could set arguments by editing scheme in
Xcode.

---------------------------------------------------------------------------
C++ Notes
---------------------------------------------------------------------------

(Originally) For the sake of simpler math routines and data structures, the code uses
C++ over straight C. The code tries to stay away from most features of the
language to keep it as simple as possible. This project attempts to break
you into C++ easily.

(Xiao's note )I implemented the BVH Tree with more C++ 11 features, including but not limited to
template based function object, lambda expressions and smart pointers. It is still very simple and straight 
forward but it (might) looks weird. Additional refactoring of code is on the TODO list of the project
since the hybrid of c and c++ codes could be annoying and confusing. 

---------------------------------------------------------------------------
Source Files and Directory Structure
---------------------------------------------------------------------------

README              -- this file

resources/
    models/             -- models used in scenes.
    images/             -- textures used in scenes.
    scenes/             -- scenes on which to test your program.

src/build/              == Build system stuff.
    CMakeLists.txt      -- Compiler flags can be adjusted by editing the list in
                        here.

src/raytracer/          == Project-specific files. Main file to edit is here.
    main                -- Main function, application backend, and scene rendering.
    raytracer           -- Main raytracing implementation
    Photon (deprecated) -- Photon data structure for photon mapping
    Utils               -- cPhoton used for ISPC photon mapping, KDNode for KD-Tree
                           !!! This is a temporary bad design, I will change this 


src/application/    == General application files. You can ignore all of it.
    application     -- SDL backend, runs main loop.
    camera_roam     -- Functions for camera control via mouse and keyboard.
    imageio         -- Functions to load and save PNG files.
    opengl          -- Header to include correct OpenGL headers.
    scene_loader    -- Code to load a scene from a file.

src/math/           == Math utilities.
    camera          -- Camera class with functions to mutate.
    color           -- A class for RGB colors and related functions.
    math            -- Basic header and a few generic functions.
    matrix          -- 3D, 4D matrix classes and several related functions.
    quaternion      -- Quaternion class and several related functions--very
                        useful for 3D rotations.
    vector          -- 2D, 3D, 4D vector classes and many related functions.

src/scene/          == Scene-specific files and rendering. 
    azBVHTree       -- Azurender BVH-Tree.
    BndBox          -- Bounding box class, implementation based on PBRT.
    mesh
    model
    ray
    scene
    sphere
    triangle        -- Supporting data structures... I will reconstruct them sooner
                       or later... some of them are painful.

src/tinyxml/        == XML parser, used with scenes. I will use something else to change this
                       maybe TINY XML 2.



---------------------------------------------------------------------------
Additional Notes
---------------------------------------------------------------------------

The source codes are not completely obeying code specifications like a commercial software does
since I've been trying to integrate new things all the time. However some modules with higher reusability
are better written (like BVH-Tree). raytracer.cpp is quite a bit messy that contains additional dead codes,
so please be aware of changing things in it. Hopefully I would fix it soon once I'm done with AzurenderPlus, 
the distributed version of this ray tracer.
